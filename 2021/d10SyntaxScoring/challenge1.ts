/** Autogenerated template. */

const closingCharsToOpeningCharsMap: { [key: string]: string } = {
  ")": "(",
  "]": "[",
  "}": "{",
  ">": "<",
};

const characterScoreMap: { [key: string]: number } = {
  ")": 3,
  "]": 57,
  "}": 1197,
  ">": 25137,
};

const openingChars: string[] = Object.values(closingCharsToOpeningCharsMap);

const getFirstNonMatchingCharacter = (_chunk: string) => {
  const chunk = _chunk.trim();
  const stack: string[] = [];

  for (let i = 0; i < chunk.length; i++) {
    const character = chunk[i];

    if (openingChars.includes(character)) {
      stack.push(character);
    } else {
      const lastStackItem = stack[stack.length - 1];
      const expectedOpeningCharacter = closingCharsToOpeningCharsMap[character];
      if (lastStackItem === expectedOpeningCharacter) {
        stack.pop();
      } else {
        return character;
      }
    }
  }
};

const runSolution = (input: string[]): any => {
  /** Solution goes here */
  const unmatchedChars: any[] = input
    .map(getFirstNonMatchingCharacter)
    .filter(Boolean);

  return unmatchedChars.reduce(
    (accumulator, unmatchedChar) =>
      accumulator + characterScoreMap[unmatchedChar],
    0
  );
};

export default runSolution;
