/** Autogenerated template. */
export class Vertex {
  value: string;
  allowedNumVisits: number;
  adjancentVertices: Vertex[];

  constructor(value: string) {
    this.value = value;
    this.adjancentVertices = [];
    this.allowedNumVisits =
      value.toUpperCase() === value ? Number.MAX_SAFE_INTEGER : 1;
  }
}

class Edge {
  start?: Vertex;
  end?: Vertex;
}

const runSolution = (input: string[]): any => {
  /** Solution goes here */
  const vertices: { [key: string]: Vertex } = {};

  const adjacentVertices: { [key: string]: Vertex[] } = {};

  for (const edge of input) {
    const [start, end] = edge.split("-");
    if (!vertices[start]) {
      vertices[start] = new Vertex(start);
    }
    if (!vertices[end]) {
      vertices[end] = new Vertex(end);
    }

    if (!adjacentVertices[start]) {
      adjacentVertices[start] = [];
    }

    adjacentVertices[start].push(vertices[end]);
  }

  return adjacentVertices;
};

export default runSolution;
