/** Autogenerated template. */
export interface IInput {
  polymerTemplate: string;
  pairInsertionRules: { [key: string]: string };
}

const polymerize = (
  inputString: string,
  insertionRules: { [key: string]: string }
): string => {
  let result = "";
  for (let i = 0; i < inputString.length - 1; i++) {
    const pair: string = inputString.slice(i, i + 2);
    result += `${inputString[i]}${insertionRules[pair]}`;
  }
  return result + inputString[inputString.length - 1];
};

const getDiffOfMostAndLeastCommonElements = (inputString: string): number => {
  const charactersCount = Array(26).fill(0);
  const characters = charactersCount.map((_, index) =>
    String.fromCharCode(65 + index)
  );

  for (let i = 0; i < characters.length; i++) {
    const characterMatcher = new RegExp(characters[i], "g");
    const matchedCharacters = inputString.match(characterMatcher) || [];
    charactersCount[i] = matchedCharacters.length;
  }

  const sorted = charactersCount.filter(Boolean).sort((a, b) => a - b);
  return sorted[sorted.length - 1] - sorted[0];
};

const runSolution = (input: IInput): any => {
  /** Solution goes here */
  const numSteps = 10;
  let result = input.polymerTemplate;

  for (let i = 0; i < numSteps; i++) {
    result = polymerize(result, input.pairInsertionRules);
  }
  return getDiffOfMostAndLeastCommonElements(result);
};

export default runSolution;
