/** Autogenerated template. */

const getLowPoints = (rows: string[]): number[] => {
  const result: number[] = [];

  rows.forEach((row, rowIndex) => {
    for (let i = 0; i < row.length; i++) {
      const value = Number(row[i]);

      const top =
        rowIndex > 0 ? rows[rowIndex - 1][i] : Number.MAX_SAFE_INTEGER;
      const bottom =
        rowIndex < rows.length - 1
          ? rows[rowIndex + 1][i]
          : Number.MAX_SAFE_INTEGER;
      const left = i > 0 ? row[i - 1] : Number.MAX_SAFE_INTEGER;
      const right = i < row.length - 1 ? row[i + 1] : Number.MAX_SAFE_INTEGER;

      const isSmallestOfAll = [
        Number(top),
        Number(bottom),
        Number(left),
        Number(right),
      ].every((x) => x > value);

      if (isSmallestOfAll) {
        result.push(value);
      }
    }
  });

  return result;
};

const calculateRisk = (lowPoints: number[]): number =>
  lowPoints.reduce((accumulator, point) => accumulator + point + 1, 0);

const runSolution = (input: string[]): any => {
  /** Solution goes here */
  const lowPoints = getLowPoints(input);
  return calculateRisk(lowPoints);
};

export default runSolution;
